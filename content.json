[{"title":"hexo搭建个人博客","date":"2017-04-18T10:06:06.000Z","path":"2017/04/18/hexo搭建个人博客/","text":"本文主要讲在windows下，如何使用hexo搭建个人博客，以及hexo的常用命令 准备工作在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个； 安装了node.js、npm，并了解相关基础知识； 安装了gitbash工具； nodejs版本在6.10.2； 本文环境： Windows10.0 nodejs@6.10.2 搭建github博客创建仓库新建一个名为&nbsp;你的用户名.github.io&nbsp;的仓库，比如说，如果你的github用户名是test，那么你就新建&nbsp;test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：&nbsp;username.github.io，其中&nbsp;username&nbsp;是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 1$ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1ssh-keygen -t rsa -C \"邮件地址\" 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到&nbsp;.ssh\\id_rsa.pub&nbsp;文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 测试是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示&nbsp;Are you sure you want to continue connecting (yes/no)?&nbsp;输入yes，然后会看到： 1Hi liuxianan! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 使用hexo写博客hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 注意事项安装之前先来说几个注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种&nbsp;_config.yml&nbsp;文件，一个是根目录下的全局的&nbsp;_config.yml&nbsp;，一个是各个theme下的； 安装1$ npm install -g hexo 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是&nbsp;F:\\Workspaces\\hexo&nbsp;，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 12$ cd /f/Workspaces/hexo/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图 12$ hexo g # 生成$ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s&nbsp;是开启本地预览服务，打开浏览器访问 http://localhost:4000即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 修改主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： 12$ cd /f/Workspaces/hexo/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载后的主题都在这里： 修改&nbsp;_config.yml&nbsp;中的&nbsp;theme: landscape&nbsp;改为&nbsp;theme: yilia，然后重新执行&nbsp;hexo g&nbsp;来重新生成。 如果出现一些莫名其妙的问题，可以先执行&nbsp;hexo clean&nbsp;来清理一下&nbsp;public&nbsp;的内容，然后再来重新生成和发布。 上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，&nbsp;ssh key&nsbp;肯定要配置好。 其次，配置&nbsp;_config.yml&nsbp;中有关deploy的部分： 正确写法：1234deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master 错误写法：1234deploy: type: github repository: https://github.com/liuxianan/liuxianan.github.io.git branch: master 后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行&nbsp;hexo d&nbsp;的话一般会报如下错误：1Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件：1npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用&nbsp;git bash，否则会提示&nbsp;Permission denied (publickey)&nbsp;. 打开你的&nbsp;git bash&nbsp;，输入&nbsp;hexo d&nbsp;就会将本次有改动的代码全部提交，没有改动的不会： 保留CNAME、README.md等文件提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 常用hexo命令常见命令1234567hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传 _config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 写博客定位到我们的hexo根目录，执行命令：1hexo new 'my-first-blog' hexo会帮我们在&nbsp;_posts&nbsp;下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： 123456789---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 那么&nbsp;hexo new page ‘postName’&nbsp;命令和&nbsp;hexo new ‘postName’&nbsp;有什么区别呢？ 1hexo new page \"my-second-blog\" 生成如下： 最终部署时生成：&nbsp;hexo\\public\\my-second-blog\\index.html&nbsp;，但是它不会作为文章出现在博文目录。 写博客工具那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上&nbsp;&nbsp;即可，例如：12345678910111213# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 最终效果： 来源地址：http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#前言","tags":[{"name":"hexo","slug":"hexo","permalink":"https://gj201314.github.io/tags/hexo/"},{"name":"搭建hexo个人博客","slug":"搭建hexo个人博客","permalink":"https://gj201314.github.io/tags/搭建hexo个人博客/"}]},{"title":"npm使用介绍","date":"2017-04-13T08:33:06.000Z","path":"2017/04/13/npm使用介绍/","text":"NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：允许用户从NPM服务器下载别人编写的第三方包到本地使用。允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 查看npm版本号：1$ npm -v npm升级：1npm install npm -g 使用 npm 命令安装模块：1$ npm install &lt;Module Name&gt; *注意：$代表当前目录 本地安装包会放在当前目录下的node_modules中，在代码中只需要通过 require(‘Module Name’) 的方式就好，无需指定第三方包路径 全局安装与本地安装npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如： 12npm install express -g # 全局安装npm install express # 本地安装 本地安装 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。 可以通过 require() 来引入本地安装的包。全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录。 可以直接在命令行里使用。如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。 使用 npm 查看安装信息：你可以使用以下命令来查看所有全局安装的模块1$ npm list -g 如果要查看某个模块的版本号，可以使用命令如下1$ npm list grunt ###使用 package.jsonpackage.json 位于模块的目录下，用于定义包的属性。 属性说明： name - 包名。 version - 包的版本号。 description - 包的描述。 homepage - 包的官网 url 。 author - 包的作者姓名。 contributors - 包的其他贡献者姓名。 dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。 repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。 main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(“express”)。 keywords - 关键字 使用 npm 卸载模块：1$ npm uninstall express 使用 npm 更新模块：1$ npm update express 使用 npm 搜索模块：1$ npm search express 使用 npm 创建模块：1$ npm init 在npm资源库中注册用户：1$ npm adduser 使用 npm 发布模块：1$ npm publish npm常用命令：1.NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。2.使用npm help 可查看某条命令的详细帮助，例如npm help install。3.在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。4.使用npm update 可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。5.使用npm update -g可以把全局安装的对应命令行程序更新至最新版。6.使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。7.使用npm unpublish @可以撤销发布自己发布过的某个版本代码。 使用 npm 镜像：1$ npm install -g cnpm --registry=https://registry.npm.taobao.org","tags":[{"name":"npm","slug":"npm","permalink":"https://gj201314.github.io/tags/npm/"},{"name":"npm使用","slug":"npm使用","permalink":"https://gj201314.github.io/tags/npm使用/"},{"name":"什么是全局与局部","slug":"什么是全局与局部","permalink":"https://gj201314.github.io/tags/什么是全局与局部/"}]}]